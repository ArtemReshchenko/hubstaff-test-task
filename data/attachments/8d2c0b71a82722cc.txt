# Test info

- Name: Project Management >> Test Case #69: Create project
- Location: /home/runner/work/hubstaff-test-task/hubstaff-test-task/tests/hubstaff-tests.spec.ts:90:7

# Error details

```
Error: browserType.launch: Executable doesn't exist at /home/runner/.cache/ms-playwright/webkit-2158/pw_run.sh
╔═════════════════════════════════════════════════════════════════════════╗
║ Looks like Playwright Test or Playwright was just installed or updated. ║
║ Please run the following command to download new browsers:              ║
║                                                                         ║
║     npx playwright install                                              ║
║                                                                         ║
║ <3 Playwright Team                                                      ║
╚═════════════════════════════════════════════════════════════════════════╝
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import {
   3 |   TEST_USER,
   4 |   generateUniqueName,
   5 |   takeScreenshotOnFailure,
   6 | } from './utils/test-helpers';
   7 | import { EmailHelper } from './utils/email-helper';
   8 | import { MarketingPage } from './pages/marketing-page';
   9 | import { SignupPage } from './pages/signup-page';
   10 | import { LoginPage } from './pages/login-page';
   11 | import { ProjectPage } from './pages/project-page';
   12 | import { PaymentPage } from './pages/payment-page';
   13 |
   14 | // Test case #83: Signup for the 14-day free trial
   15 | test.describe('Hubstaff Signup and Login', () => {
   16 |   // Increase timeout for email verification tests
   17 |   test.setTimeout(120000);
   18 |
   19 |   test('Test Case #83: Signup for the 14-day free trial', async ({ page }) => {
   20 |     // Initialize page objects
   21 |     const marketingPage = new MarketingPage(page);
   22 |     const signupPage = new SignupPage(page);
   23 |
   24 |     // Get API key from environment
   25 |     const apiKey = process.env.MAILSLURP_API_KEY;
   26 |     if (!apiKey) {
   27 |       throw new Error(
   28 |         'MAILSLURP_API_KEY is not set in environment variables or .env file',
   29 |       );
   30 |     }
   31 |
   32 |     const emailHelper = new EmailHelper(page, apiKey, true); // Enable debug logging
   33 |
   34 |     // Precondition: Marketing landing page is open
   35 |     await marketingPage.goto();
   36 |     await marketingPage.verifyOnMarketingPage();
   37 |
   38 |     // 1. Click the 'Free 14-day trial' button on the top nav header
   39 |     await marketingPage.clickFreeTrialButton();
   40 |
   41 |     // Verify redirect to sign up page
   42 |     await signupPage.verifyOnSignupPage();
   43 |
   44 |     // Create a new MailSlurp inbox for verification
   45 |     const { inbox, emailAddress } = await emailHelper.createInbox();
   46 |     console.log(`Created temporary email address: ${emailAddress}`);
   47 |
   48 |     // Generate random first and last names
   49 |     const firstName = generateUniqueName('User', false);
   50 |     const lastName = generateUniqueName('Test', false);
   51 |     console.log(`Generated test user: ${firstName} ${lastName}`);
   52 |
   53 |     // 2-6. Complete the signup process with the MailSlurp email
   54 |     const userData = {
   55 |       firstName,
   56 |       lastName,
   57 |       email: emailAddress,
   58 |       password: TEST_USER.password,
   59 |       inboxId: inbox.id,
   60 |     };
   61 |
   62 |     // Complete registration with email verification
   63 |     const success =
   64 |       await signupPage.completeRegistrationWithEmailVerification(userData);
   65 |
   66 |     // Verify the registration was successful
   67 |     expect(success).toBe(true);
   68 |
   69 |     // Clean up: Delete the temporary inbox
   70 |     await emailHelper.deleteInbox(inbox.id);
   71 |   });
   72 |
   73 |   test('Test Case #100: Sign in', async ({ page }) => {
   74 |     // Initialize page objects
   75 |     const marketingPage = new MarketingPage(page);
   76 |     const loginPage = new LoginPage(page);
   77 |
   78 |     await marketingPage.goto();
   79 |     await marketingPage.verifyOnMarketingPage();
   80 |     await marketingPage.clickSignInButton();
   81 |
   82 |     await loginPage.verifyUrlAndTitle();
   83 |     await loginPage.login(TEST_USER.email, TEST_USER.password);
   84 |
   85 |     await expect(page).toHaveURL(/.*\/getting_started.*/);
   86 |   });
   87 | });
   88 |
   89 | test.describe('Project Management', () => {
>  90 |   test('Test Case #69: Create project', async ({ page }) => {
      |       ^ Error: browserType.launch: Executable doesn't exist at /home/runner/.cache/ms-playwright/webkit-2158/pw_run.sh
   91 |     const projectPage = new ProjectPage(page);
   92 |     const marketingPage = new MarketingPage(page);
   93 |     const loginPage = new LoginPage(page);
   94 |
   95 |     await marketingPage.goto();
   96 |     await marketingPage.verifyOnMarketingPage();
   97 |     await marketingPage.clickSignInButton();
   98 |
   99 |     await loginPage.verifyUrlAndTitle();
  100 |     await loginPage.login(TEST_USER.email, TEST_USER.password);
  101 |
  102 |     await projectPage.navigateToProjectsPage();
  103 |     const projectName = generateUniqueName('Project');
  104 |     await projectPage.createProject(projectName);
  105 |   });
  106 | });
  107 |
  108 | test.describe('Financials', () => {
  109 |   test('Test Case #93: Create payment', async ({ page }) => {
  110 |     const paymentPage = new PaymentPage(page);
  111 |     const marketingPage = new MarketingPage(page);
  112 |     const loginPage = new LoginPage(page);
  113 |
  114 |     await marketingPage.goto();
  115 |     await marketingPage.verifyOnMarketingPage();
  116 |     await marketingPage.clickSignInButton();
  117 |
  118 |     await loginPage.verifyUrlAndTitle();
  119 |     await loginPage.login(TEST_USER.email, TEST_USER.password);
  120 |
  121 |     await paymentPage.navigateToPaymentsPage();
  122 |
  123 |     await paymentPage.createOneTimePayment(
  124 |       TEST_USER.fullName,
  125 |       '0.005',
  126 |       'Bonus payment for excellent work',
  127 |     );
  128 |   });
  129 | });
  130 |
  131 | test.afterEach(async ({ page }, testInfo) => {
  132 |   await takeScreenshotOnFailure(testInfo, page);
  133 | });
```